import streamlit as st
from openai import OpenAI

# Configuration du client OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# R√©ponses pr√©enregistr√©es dans un format plus accessible
PREDEFINED_RESPONSES = {
    "but sd": """La science des donn√©es est un domaine en pleine expansion, au c≈ìur de l'innovation, et c'est pr√©cis√©ment ce qui m'attire. Je suis passionn√© par LA math√©matique et l'informatique, et j'ai toujours aim√© jouer avec les chiffres. Ce qui me motive particuli√®rement, c'est d'apprendre √† ¬´ faire parler les donn√©es ¬ª.""",
    
    "parcours": """Mon parcours est atypique : apr√®s un bac STI2D, j'ai explor√© la programmation √† l'√âcole 42,
puis je suis devenu scaphandrier professionnel. Cette exp√©rience m'a appris la rigueur et la gestion du stress.
Aujourd'hui en DAEU B, je consolide mes bases scientifiques pour me r√©orienter vers la science des donn√©es.""",
    
    "motivations": """Ma principale motivation est de combiner ma passion pour les math√©matiques et l'informatique avec mon d√©sir d'√©volution professionnelle. Je suis fascin√© par la fa√ßon dont les donn√©es peuvent nous aider √† comprendre le monde et √† prendre de meilleures d√©cisions."""
}

# Contexte pour OpenAI
system_prompt = """
Tu es Adrien BERLIAT, 25 ans, en pr√©paration d'un DAEU-B apr√®s une reprise d'√©tude.
Tu r√©ponds aux questions sur ta candidature au BUT Science des Donn√©es.
Les questions proviennent de professeurs et recruteurs pour l'admission.

Profil rapide :
- Ex-plongeur scaphandrier professionnel (√âcole Nationale des Scaphandriers)
- Exp√©rience en programmation (√âcole 42, certifications Python)
- Passionn√© de math√©matiques et d'informatique depuis l'enfance
- Grande capacit√© d'adaptation prouv√©e par ta reconversion
- Exp√©rience en gestion de projets techniques et travail en √©quipe
- Objectif : Int√©grer le BUT SD puis poursuivre en master/√©cole d‚Äôing√©nieur pour devenir Data Analyst.

R√©ponds de mani√®re **professionnelle mais sympathique**, en restant concis et humble.
Mets en avant ta motivation et ton parcours unique quand c'est pertinent.
"""

def generate_response(client, message, conversation_history):
    """G√©n√®re une r√©ponse en fonction du message re√ßu."""

    # V√©rifier si la question a une r√©ponse pr√©enregistr√©e
    message_lower = message.lower().strip('?').strip()  # Enlever les ? et les espaces
    
    # Mapping des questions pour les variations courantes
    question_mapping = {
        "but sd": "but sd",
        "but sd ?": "but sd",
        "parcours": "parcours",
        "parcours ?": "parcours",
        "motivations": "motivations",
        "motivations ?": "motivations"
    }

    # V√©rifier si la question est dans le mapping
    if message_lower in question_mapping:
        key = question_mapping[message_lower]
        return PREDEFINED_RESPONSES[key]

    # Si pas de r√©ponse pr√©enregistr√©e, utiliser OpenAI
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": message}
    ]

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Utilisation de GPT-3.5 au lieu de GPT-4
            messages=messages,
            temperature=0.7,  # Ajout d'un param√®tre de temp√©rature pour des r√©ponses plus rapides
            max_tokens=200    # Limite la longueur des r√©ponses
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"Erreur: {str(e)}")
        return "Une erreur est survenue, merci de r√©essayer."

def add_floating_chat_to_app():
    st.markdown("""
        <style>
        /* Hide empty label container */
        [data-testid="stWidgetLabel"] {
            display: none !important;
        }

        /* Optimize vertical spacing */
        .stTextInput > div {
            margin-top: 0.5rem !important;
        }

        .chat-message {
            padding: 0.5rem 1rem !important;
            margin: 0.5rem 0 !important;
            font-size: 1rem !important;
            line-height: 1.4 !important;
            border-radius: 8px !important;
        }
        
        .bot-message {
            background: rgba(28, 31, 38, 0.7) !important;
            border: 1px solid rgba(96, 165, 250, 0.2) !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
            color: rgba(255, 255, 255, 0.9) !important;
        }

        /* Reduce button container spacing */
        .row-widget.stHorizontal {
            gap: 0.25rem !important;
            margin-bottom: 0.75rem !important;
        }

        /* Compact input field with better styling */
        .stTextInput input {
            padding: 0.5rem 1rem !important;
            height: 2.5rem !important;
            background: rgba(28, 31, 38, 0.7) !important;
            border: 1px solid rgba(96, 165, 250, 0.2) !important;
            border-radius: 6px !important;
            color: white !important;
            font-size: 0.95rem !important;
        }

        .stTextInput input:focus {
            border-color: rgba(96, 165, 250, 0.5) !important;
            box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.1) !important;
        }

        /* Style for the robot emoji */
        .bot-message .emoji {
            margin-right: 0.5rem !important;
            opacity: 0.8 !important;
        }
        </style>
    """, unsafe_allow_html=True)

    # Initialize session state
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Predefined question buttons first
    col1, col2, col3 = st.columns(3)
    
    if col1.button("BUT SD ?"):
        response = PREDEFINED_RESPONSES["but sd"]
        st.session_state.messages = [{"role": "assistant", "content": response}]
        st.rerun()
    if col2.button("Parcours ?"):
        response = PREDEFINED_RESPONSES["parcours"]
        st.session_state.messages = [{"role": "assistant", "content": response}]
        st.rerun()
    if col3.button("Motivations ?"):
        response = PREDEFINED_RESPONSES["motivations"]
        st.session_state.messages = [{"role": "assistant", "content": response}]
        st.rerun()

    # Input field below buttons
    user_input = st.text_input("", key="chat_input", placeholder="Posez moi une autre question ici...")
    
    # Process user input for chatbot
    if user_input and st.session_state.get("last_input") != user_input:
        st.session_state.last_input = user_input
        response = generate_response(client, user_input, st.session_state.messages)
        if response:
            st.session_state.messages = [
                {"role": "assistant", "content": response}
            ]

    # Display bot response
    for msg in st.session_state.messages:
        if msg["role"] == "assistant":
            st.markdown(
                f"""<div class="chat-message bot-message">
                    <span class="emoji">ü§ñ</span>{msg['content']}
                </div>""", 
                unsafe_allow_html=True
            )