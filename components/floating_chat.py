import streamlit as st
from openai import OpenAI

# Configuration du client OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# R√©ponses pr√©enregistr√©es dans un format plus accessible
PREDEFINED_RESPONSES = {
    "pourquoi le but sd": """La science des donn√©es est un domaine en pleine expansion, au c≈ìur de l'innovation, et c'est pr√©cis√©ment ce qui m'attire.
Je suis passionn√© par les math√©matiques et l'informatique, et j'ai toujours aim√© jouer avec les chiffres. Ce qui me motive particuli√®rement, c'est d'apprendre √† ¬´ faire parler les donn√©es ¬ª.""",
    
    "quel est ton parcours": """J'ai commenc√© en terminale STI2D, que j'ai quitt√©e en cours d'ann√©e, avant de passer par la piscine de l'√©cole 42.
Apr√®s un d√©tour par l'entrepreneuriat et un dipl√¥me √† l'√âcole Nationale des Scaphandriers, j'ai d√©cid√© de me r√©orienter vers la science des donn√©es.""",
    
    "quelles sont tes motivations": """Ma principale motivation est de combiner ma passion pour les math√©matiques et l'informatique avec mon d√©sir d'√©volution professionnelle.
Je suis fascin√© par la fa√ßon dont les donn√©es peuvent nous aider √† comprendre le monde et √† prendre de meilleures d√©cisions."""
}

# Contexte pour OpenAI
system_prompt = """
Tu es Adrien BERLIAT, 25 ans, en pr√©paration d'un DAEU-B apr√®s une reprise d'√©tude.
Tu r√©ponds aux questions sur ta candidature au BUT Science des Donn√©es.
Les questions proviennent de professeurs et recruteurs pour l'admission.

Profil rapide :
- Ex-plongeur scaphandrier professionnel (√âcole Nationale des Scaphandriers)
- Exp√©rience en programmation (√âcole 42, certifications Python)
- Passionn√© de math√©matiques et d'informatique depuis l'enfance
- Grande capacit√© d'adaptation prouv√©e par ta reconversion
- Exp√©rience en gestion de projets techniques et travail en √©quipe
- Objectif : Int√©grer le BUT SD puis poursuivre en master/√©cole d‚Äôing√©nieur pour devenir Data Analyst.

R√©ponds de mani√®re **professionnelle mais sympathique**, en restant concis et humble.
Mets en avant ta motivation et ton parcours unique quand c'est pertinent.
"""

def generate_response(client, message, conversation_history):
    """G√©n√®re une r√©ponse en fonction du message re√ßu."""

    # V√©rifier si la question a une r√©ponse pr√©enregistr√©e
    message_lower = message.lower().strip('?').strip()  # Enlever les ? et les espaces
    
    # Mapping des questions pour les variations courantes
    question_mapping = {
        "pourquoi le but sd": "pourquoi le but sd",
        "quel est ton parcours": "quel est ton parcours",
        "quelles sont tes motivations": "quelles sont tes motivations",
        # Ajout des variations avec point d'interrogation
        "pourquoi le but sd ?": "pourquoi le but sd",
        "quel est ton parcours ?": "quel est ton parcours",
        "quelles sont tes motivations ?": "quelles sont tes motivations",
    }

    # V√©rifier si la question est dans le mapping
    if message_lower in question_mapping:
        key = question_mapping[message_lower]
        return PREDEFINED_RESPONSES[key]

    # Si pas de r√©ponse pr√©enregistr√©e, utiliser OpenAI
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": message}
    ]

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Utilisation de GPT-3.5 au lieu de GPT-4
            messages=messages,
            temperature=0.7,  # Ajout d'un param√®tre de temp√©rature pour des r√©ponses plus rapides
            max_tokens=200    # Limite la longueur des r√©ponses
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"Erreur: {str(e)}")
        return "Une erreur est survenue, merci de r√©essayer."

def add_floating_chat_to_app():
    """Ajoute le chat √† l'application"""
    st.markdown("""
        <style>
        .chat-message {
            padding: 1rem;
            border-radius: 0.5rem;
            margin: 0.5rem 0;
            font-size: 0.9rem;
        }
        
        .user-message {
            text-align: right;
            background-color: #E8F0FF;
            border: 1px solid #D0E1FF;
            color: #1F2937;
        }
        
        .bot-message {
            text-align: left;
            background-color: #F3F4F6;
            border: 1px solid #E5E7EB;
            color: #1F2937;
        }

        /* Style des boutons */
        .stButton > button {
            background-color: #F3F4F6;
            color: #1F2937;
            border: 1px solid #E5E7EB;
            border-radius: 0.5rem;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }

        .stButton > button:hover {
            background-color: #E5E7EB;
            border-color: #D1D5DB;
        }

        /* Style de l'input */
        .stTextInput > div > div > input {
            border-radius: 0.5rem;
            border: 1px solid #E5E7EB;
            color: #1F2937;
        }

        /* Hide empty labels only in chat input */
        .stTextInput [data-testid="stWidgetLabel"]:empty,
        .stTextInput .st-emotion-cache-aoyl2m:empty,
        .stTextInput div[data-testid="stMarkdownContainer"]:empty {
            display: none !important;
            height: 0 !important;
            padding: 0 !important;
            margin: 0 !important;
        }

        /* Keep other elements visible */
        .block-container {
            display: block !important;
        }

        /* Ensure chat components are visible */
        .chat-message,
        .stButton,
        .stTextInput {
            display: block !important;
            visibility: visible !important;
        }

        /* Style sp√©cifique pour les boutons de questions pr√©d√©finies */
        .stButton > button {
            background-color: #1a1d23 !important;  /* M√™me couleur que sidebar_bg */
            color: white !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            transition: all 0.2s ease !important;
        }

        /* Effet hover sur les boutons */
        .stButton > button:hover {
            background-color: rgba(255, 255, 255, 0.1) !important;
            border-color: rgba(255, 255, 255, 0.2) !important;
            transform: translateX(4px);
        }

        /* S'assurer que le texte des boutons reste blanc */
        .stButton > button p,
        .stButton > button span,
        .stButton > button div {
            color: white !important;
        }

        /* Ajuster les marges des boutons pour un meilleur espacement */
        .stButton {
            margin: 0.25rem 0 !important;
        }
        </style>
    """, unsafe_allow_html=True)
        
    # Initialize session state first
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Limit messages to last question and answer (max 2 messages)
    if len(st.session_state.messages) > 2:
        st.session_state.messages = st.session_state.messages[-2:]

    # Affichage des messages existants
    for msg in st.session_state.messages:
        is_user = msg["role"] == "user"
        st.markdown(
            f"""<div class="chat-message {'user-message' if is_user else 'bot-message'}">
                {'' if is_user else 'ü§ñ '}{msg['content']}
            </div>""", 
            unsafe_allow_html=True
        )

    # Entr√©e utilisateur (removed the "Vous:" label)
    user_input = st.text_input("", key="chat_input", placeholder="Posez votre question ici...")
    
    # Gestion des boutons de questions sugg√©r√©es
    col1, col2, col3 = st.columns(3)
    
    button_clicked = False
    if col1.button("Pourquoi le BUT SD ?"):
        user_input = "Pourquoi le BUT SD ?"
        button_clicked = True
    if col2.button("Ton parcours ?"):
        user_input = "Quel est ton parcours ?"
        button_clicked = True
    if col3.button("Tes motivations ?"):
        user_input = "Quelles sont tes motivations ?"
        button_clicked = True

    # Traitement de l'entr√©e (soit par texte soit par bouton)
    if user_input and (button_clicked or st.session_state.get("last_input") != user_input):
        # R√©initialiser les messages pour ne garder que la derni√®re interaction
        st.session_state.messages = []
        
        # Ajouter le nouveau message
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        try:
            # Obtenir la r√©ponse
            response = generate_response(client, user_input, [])  # Plus besoin de l'historique
            st.session_state.messages.append({"role": "assistant", "content": response})
            st.session_state["last_input"] = user_input
            
        except Exception as e:
            st.error(f"Erreur: {str(e)}")
        
        st.rerun()